解题报告
一、算法思路及核心要点
    算法的核心思路是利用二分查找，这样可以实验搜索效率的提高。首先设置两个bool型函数，分别判断点在直线的左右方，注意右方要包含点在线上的情况，事实证明，这样的设置，搭配二分查找的条件，是很有优越性的。
    首先考虑点在边界直线之外的两种情况，之后说明点在第1和第n条线之间。设置变量lo,hi,mi，若点在直线lo和mi之间，将mi赋值给hi，若在直线mi和hi之间，则将mi赋值给lo，每次循环后mi=（lo+hi>>1.终止条件是lo+1<hi,返回lo。下面简单说明这种设置的正确性，分三种情况：
（1）lo+1<hi的条件即将破坏，点在lo，mi之间，下一步hi=mi终止循环，点在区域lo（由于直线的秩从1开始，第i 条线往右即为区域i）。
（2）lo+1<hi的条件即将破坏，点在mi,hi之间，下一步lo=mi终止循环，点在区域lo 。
（3）lo+1<hi的条件即将破坏，点在mi上，，本质和（2）相同，下一步lo=mi终止循环，点在区域lo,这样说明了前面bool函数设置的巧妙之处。
    细节方面注意，由于线段的秩希望从1开始，故a,b多开辟一个数组空间。
二、调试中遇到的问题及解决办法
主要问题在于核心算法部分，终止条件，返回值和bool函数的搭配上，我起初按照讲义中lo<hi的终止条件，并返回mi，发现有漏洞，便重新设置。这些条件之间互相关联，要想合理的搭配，我觉得要先固定某些量，再去分析剩下的条件要怎么设置。

三、算法复杂度估计
1、时间复杂度
对m个点便利，每个点使用二分查找，复杂度O(logn),总体复杂度O(mlogn)
2、空间复杂度
开辟两个m量级和两个n量级的数组，memory消耗O（m+n）